[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "multiSMASH"
version = "0.5.0"
description = "A snakemake-based antiSMASH wrapper for large-scale analyses"
readme = "README.md"
license = {file = "LICENSE.txt"}
requires-python = ">=3.9"
authors = [
    { name = "Zachary L. Reitz", email = "zlreitz@gmail.com" },
]
dependencies = [
    "pulp<2.8.0",
    "snakemake>=7.32.3",
]

[project.scripts]
multismash = "multismash.multismash:main"
multismash-config = "multismash.multismash_config:main"

[project.urls]
Homepage = "https://github.com/zreitz/multismash"

[tool.hatch.build.targets.wheel]
include = [
    "multismash",
    "workflow",
]

[tool.hatch.build.targets.sdist]
include = [
    "multismash",
    "workflow",
]

[tool.pytest.ini_options]
minversion = "7.0"
norecursedirs = [
  "conda",
  ".snakemake"
]

[tool.ruff.lint]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "FURB",     # refurb
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "PYI",      # flake8-pyi
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "ISC001",   # Conflicts with formatter
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
]
typing-modules = ["mypackage._compat.typing"]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
